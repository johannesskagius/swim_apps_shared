import 'package:flutter/foundation.dart';

/// A data model class that holds all the information for a single
/// 'Off the Block' analysis swim_session.
class OffTheBlockAnalysisData {
  /// A unique identifier for the analysis, typically generated by the backend.
  final String id;
  final String title;
  final DateTime date;
  final DateTime createdDate;
  final DateTime? updatedDate;
  final String swimmerId;
  final String coachId;
  final String clubId;
  final Map<String, int> markedTimestamps;
  final double startDistance;
  final double startHeight;
  final Map<String, double>? jumpData;

  OffTheBlockAnalysisData({
    required this.id,
    required this.title,
    required this.date,
    required this.swimmerId,
    required this.clubId,
    required this.coachId,
    required this.markedTimestamps,
    required this.startDistance,
    required this.startHeight,
    this.jumpData,
    this.updatedDate,
    required this.createdDate,
  });

  /// Creates an instance from a map (e.g., from Firestore or JSON).
  /// The [id] is passed separately as it's often the document ID.
  factory OffTheBlockAnalysisData.fromMap(Map<String, dynamic> map, String id) {
    return OffTheBlockAnalysisData(
      id: id,
      title: map['title'] as String,
      date: DateTime.parse(map['date'] as String),
      clubId: map['clubId'] as String,
      coachId: map['coachId'] as String,
      createdDate: DateTime.parse(map['createdDate'] as String),
      swimmerId: map['swimmerId'] as String,
      markedTimestamps: Map<String, int>.from(map['markedTimestamps'] as Map),
      startDistance: (map['startDistance'] as num).toDouble(),
      startHeight: (map['startHeight'] as num).toDouble(),
      jumpData: map['jumpData'] != null
          ? Map<String, double>.from(map['jumpData'] as Map)
          : null,
    );
  }

  /// Converts the instance to a map for serialization.
  /// The ID is excluded as it's typically managed by the database.
  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'date': date.toIso8601String(),
      'swimmerId': swimmerId,
      'clubId': clubId,
      'coachId': coachId,
      'createdDate': createdDate.toIso8601String(),
      'markedTimestamps': markedTimestamps,
      'startDistance': startDistance,
      'startHeight': startHeight,
      if (jumpData != null) 'jumpData': jumpData,
    };
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is OffTheBlockAnalysisData &&
        other.id == id &&
        other.title == title &&
        other.date == date &&
        other.swimmerId == swimmerId &&
        mapEquals(other.markedTimestamps, markedTimestamps) &&
        other.startDistance == startDistance &&
        other.startHeight == startHeight &&
        mapEquals(other.jumpData, jumpData);
  }

  @override
  int get hashCode {
    return id.hashCode ^
        title.hashCode ^
        date.hashCode ^
        swimmerId.hashCode ^
        markedTimestamps.hashCode ^
        startDistance.hashCode ^
        startHeight.hashCode ^
        jumpData.hashCode;
  }
}
